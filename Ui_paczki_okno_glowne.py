# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Maks\source\eric_workspace\paczki_no\paczki_okno_glowne.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from GUI_Manager  import GUI_Manager
from DB_Manager  import DB_Manager


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1000, 600)
        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralWidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.vert_console_grids = QtWidgets.QVBoxLayout()
        self.vert_console_grids.setContentsMargins(25, 25, 25, 35)
        self.vert_console_grids.setSpacing(50)
        self.vert_console_grids.setObjectName("vert_console_grids")
        self.hor_grids_layout = QtWidgets.QHBoxLayout()
        self.hor_grids_layout.setSpacing(15)
        self.hor_grids_layout.setObjectName("hor_grids_layout")
        self.grid_tab_preview = QtWidgets.QGridLayout()
        self.grid_tab_preview.setHorizontalSpacing(20)
        self.grid_tab_preview.setVerticalSpacing(6)
        self.grid_tab_preview.setObjectName("grid_tab_preview")
        self.pb_preview = QtWidgets.QPushButton(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pb_preview.sizePolicy().hasHeightForWidth())
        self.pb_preview.setSizePolicy(sizePolicy)
        self.pb_preview.setObjectName("pb_preview")
        self.grid_tab_preview.addWidget(self.pb_preview, 1, 4, 1, 2)
        self.tw_preview = QtWidgets.QTableWidget(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(111)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tw_preview.sizePolicy().hasHeightForWidth())
        self.tw_preview.setSizePolicy(sizePolicy)
        self.tw_preview.setObjectName("tw_preview")
        self.tw_preview.setColumnCount(0)
        self.tw_preview.setRowCount(0)
        self.grid_tab_preview.addWidget(self.tw_preview, 0, 0, 1, 6)
        self.combo_preview = QtWidgets.QComboBox(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.combo_preview.sizePolicy().hasHeightForWidth())
        self.combo_preview.setSizePolicy(sizePolicy)
        self.combo_preview.setObjectName("combo_preview")
        self.grid_tab_preview.addWidget(self.combo_preview, 1, 0, 1, 3)
        self.chk_active_only = QtWidgets.QCheckBox(self.centralWidget)
        self.chk_active_only.setObjectName("chk_active_only")
        self.grid_tab_preview.addWidget(self.chk_active_only, 1, 3, 1, 1)
        self.hor_grids_layout.addLayout(self.grid_tab_preview)
        self.vl_add_buttons = QtWidgets.QVBoxLayout()
        self.vl_add_buttons.setSpacing(20)
        self.vl_add_buttons.setObjectName("vl_add_buttons")
        self.gl_player_add = QtWidgets.QGridLayout()
        self.gl_player_add.setVerticalSpacing(0)
        self.gl_player_add.setObjectName("gl_player_add")
        self.pb_player_add = QtWidgets.QPushButton(self.centralWidget)
        self.pb_player_add.setObjectName("pb_player_add")
        self.gl_player_add.addWidget(self.pb_player_add, 1, 1, 1, 1)
        self.le_player_add = QtWidgets.QLineEdit(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.le_player_add.sizePolicy().hasHeightForWidth())
        self.le_player_add.setSizePolicy(sizePolicy)
        self.le_player_add.setObjectName("le_player_add")
        self.gl_player_add.addWidget(self.le_player_add, 1, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setObjectName("label_3")
        self.gl_player_add.addWidget(self.label_3, 0, 0, 1, 1)
        self.vl_add_buttons.addLayout(self.gl_player_add)
        self.gl_paczki = QtWidgets.QGridLayout()
        self.gl_paczki.setHorizontalSpacing(0)
        self.gl_paczki.setVerticalSpacing(5)
        self.gl_paczki.setObjectName("gl_paczki")
        self.le_pack_name = QtWidgets.QLineEdit(self.centralWidget)
        self.le_pack_name.setObjectName("le_pack_name")
        self.gl_paczki.addWidget(self.le_pack_name, 1, 0, 1, 1)
        self.pb_add_pack = QtWidgets.QPushButton(self.centralWidget)
        self.pb_add_pack.setObjectName("pb_add_pack")
        self.gl_paczki.addWidget(self.pb_add_pack, 4, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.gl_paczki.addWidget(self.label, 0, 0, 1, 1)
        self.le_pack_points = QtWidgets.QLineEdit(self.centralWidget)
        self.le_pack_points.setObjectName("le_pack_points")
        self.gl_paczki.addWidget(self.le_pack_points, 3, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setObjectName("label_2")
        self.gl_paczki.addWidget(self.label_2, 2, 0, 1, 1)
        self.vl_add_buttons.addLayout(self.gl_paczki)
        self.gl_assign_packs = QtWidgets.QGridLayout()
        self.gl_assign_packs.setContentsMargins(-1, -1, -1, 0)
        self.gl_assign_packs.setVerticalSpacing(0)
        self.gl_assign_packs.setObjectName("gl_assign_packs")
        self.pb_assign_pack = QtWidgets.QPushButton(self.centralWidget)
        self.pb_assign_pack.setObjectName("pb_assign_pack")
        self.gl_assign_packs.addWidget(self.pb_assign_pack, 1, 0, 1, 2)
        self.cb_choose_pack = QtWidgets.QComboBox(self.centralWidget)
        self.cb_choose_pack.setObjectName("cb_choose_pack")
        self.gl_assign_packs.addWidget(self.cb_choose_pack, 0, 1, 1, 1)
        self.cb_choose_player = QtWidgets.QComboBox(self.centralWidget)
        self.cb_choose_player.setObjectName("cb_choose_player")
        self.gl_assign_packs.addWidget(self.cb_choose_player, 0, 0, 1, 1)
        self.pm_rollback = QtWidgets.QPushButton(self.centralWidget)
        self.pm_rollback.setObjectName("pm_rollback")
        self.gl_assign_packs.addWidget(self.pm_rollback, 2, 0, 1, 1)
        self.pb_commit = QtWidgets.QPushButton(self.centralWidget)
        self.pb_commit.setObjectName("pb_commit")
        self.gl_assign_packs.addWidget(self.pb_commit, 2, 1, 1, 1)
        self.vl_add_buttons.addLayout(self.gl_assign_packs)
        self.vl_add_buttons.setStretch(0, 2)
        self.vl_add_buttons.setStretch(1, 1)
        self.vl_add_buttons.setStretch(2, 2)
        self.hor_grids_layout.addLayout(self.vl_add_buttons)
        self.gl_weekly_points = QtWidgets.QGridLayout()
        self.gl_weekly_points.setObjectName("gl_weekly_points")
        self.pb_add_weekly_points = QtWidgets.QPushButton(self.centralWidget)
        self.pb_add_weekly_points.setObjectName("pb_add_weekly_points")
        self.gl_weekly_points.addWidget(self.pb_add_weekly_points, 1, 0, 1, 1)
        self.tw_weekly_points = QtWidgets.QTableWidget(self.centralWidget)
        self.tw_weekly_points.setAlternatingRowColors(True)
        self.tw_weekly_points.setWordWrap(True)
        self.tw_weekly_points.setRowCount(1)
        self.tw_weekly_points.setColumnCount(4)
        self.tw_weekly_points.setObjectName("tw_weekly_points")
        item = QtWidgets.QTableWidgetItem()
        self.tw_weekly_points.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tw_weekly_points.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tw_weekly_points.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tw_weekly_points.setHorizontalHeaderItem(3, item)
        self.tw_weekly_points.horizontalHeader().setVisible(True)
        self.tw_weekly_points.horizontalHeader().setHighlightSections(True)
        self.tw_weekly_points.horizontalHeader().setMinimumSectionSize(15)
        self.tw_weekly_points.horizontalHeader().setStretchLastSection(False)
        self.tw_weekly_points.verticalHeader().setDefaultSectionSize(15)
        self.tw_weekly_points.verticalHeader().setSortIndicatorShown(False)
        self.tw_weekly_points.verticalHeader().setStretchLastSection(False)
        self.gl_weekly_points.addWidget(self.tw_weekly_points, 0, 0, 1, 1)
        self.hor_grids_layout.addLayout(self.gl_weekly_points)
        self.hor_grids_layout.setStretch(0, 2)
        self.hor_grids_layout.setStretch(1, 1)
        self.hor_grids_layout.setStretch(2, 2)
        self.vert_console_grids.addLayout(self.hor_grids_layout)
        self.log_console = QtWidgets.QTextBrowser(self.centralWidget)
        self.log_console.setObjectName("log_console")
        self.vert_console_grids.addWidget(self.log_console)
        self.vert_console_grids.setStretch(0, 3)
        self.vert_console_grids.setStretch(1, 1)
        self.verticalLayout_2.addLayout(self.vert_console_grids)
        MainWindow.setCentralWidget(self.centralWidget)

        self.retranslateUi(MainWindow)
        self.pb_preview.clicked.connect(self.table_preview)
        self.pb_player_add.clicked.connect(self.add_player)
        self.pb_add_pack.clicked.connect(self.add_pack)
        self.pb_assign_pack.clicked.connect(self.assign_pack)
        self.tw_weekly_points.cellChanged.connect(self.add_row)
        self.pb_add_weekly_points.clicked.connect(self.add_points)
        self.pb_commit.clicked.connect(self.commit)
        self.pm_rollback.clicked.connect(self.rollback)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pb_preview.setText(_translate("MainWindow", "Podgląd tabeli"))
        self.tw_preview.setSortingEnabled(True)
        self.chk_active_only.setText(_translate("MainWindow", "tylko aktywne"))
        self.pb_player_add.setText(_translate("MainWindow", "Dodaj gracza"))
        self.label_3.setText(_translate("MainWindow", "Nazwa nowego gracza"))
        self.pb_add_pack.setText(_translate("MainWindow", "Dodaj paczkę"))
        self.label.setText(_translate("MainWindow", "Nazwa nowej paczki"))
        self.label_2.setText(_translate("MainWindow", "Punkty zabierane za paczkę"))
        self.pb_assign_pack.setText(_translate("MainWindow", "Przydziel paczkę"))
        self.pm_rollback.setText(_translate("MainWindow", "Odrzuć zmiany"))
        self.pb_commit.setText(_translate("MainWindow", "Commit zmian"))
        self.pb_add_weekly_points.setText(_translate("MainWindow", "Dodaj punkty z tygodnia"))
        self.tw_weekly_points.setSortingEnabled(True)
        item = self.tw_weekly_points.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Nazwa gracza"))
        item = self.tw_weekly_points.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Wojny"))
        item = self.tw_weekly_points.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Datki Gildii"))
        item = self.tw_weekly_points.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Dodatkowe punkty"))


    def table_preview(self):
        GUIM = GUI_Manager()
        DBM = DB_Manager()
        
        active_only = self.chk_active_only.isChecked()
        GUIM.log_msg(f'Flaga czy aktywne: {active_only}',  1)
        if active_only == False:
            active_only = 0
        elif active_only == True:
            active_only = 1
            
        table_name = self.combo_preview.currentText()
        GUIM.log_msg(f'Nazwa podgladanej tabeli: {table_name}')
        table_data = DBM.get_full_table(table_name,  active_only)
        table_headers = DBM.get_col_names(table_name)
        GUIM.populate_table(self.tw_preview,  table_data,  table_headers)
        
        
    def add_player(self):
        GUIM = GUI_Manager()
        DBM = DB_Manager()
        
        player_name = self.le_player_add.text()
        GUIM.log_msg(f'Dodaję gracza: {player_name}',  1)
        DBM.add_player(player_name)
        
        l_players = DBM.get_players()
        GUIM.fill_players(l_players)
        
        
    def add_pack(self):
        GUIM = GUI_Manager()
        DBM = DB_Manager()
        
        pack_name = self.le_pack_name.text()
        pack_points = int(self.le_pack_points.text())
        GUIM.log_msg(f'Dodaje paczkę o nazwie: {pack_name} o cenie {pack_points} punktow')
        DBM.add_pack(pack_name,  pack_points)
        
        l_packs = DBM.get_packs()
        GUIM.fill_packs(l_packs)
        
        
    def assign_pack(self):
        GUIM = GUI_Manager()
        DBM = DB_Manager()
        
        player_name = self.cb_choose_player.currentText()
        pack_name = self.cb_choose_pack.currentText()
        GUIM.log_msg(f'Przydzielam paczke {pack_name} dla gracza {player_name}')
        DBM.assign_pack(player_name,  pack_name)
        
          
    def add_row(self,  row,  column):
        tw = self.tw_weekly_points
        if column == 3:
            curr_row_cnt = tw.rowCount()
            tw.setRowCount(curr_row_cnt + 1)
            
            
    def add_points(self):
        GUIM = GUI_Manager()
        DBM = DB_Manager()
        
        data = GUIM.get_tw_as_list2d(self.tw_weekly_points)
        contributors = GUIM.get_contributor_names(self.tw_weekly_points)
        rc = DBM.validate_player_names(contributors)
        if rc == True:
            GUIM.log_msg(f'Urobki do wpisania: \n{data}')
            DBM.insert_points(data)
        else:
            GUIM.log_msg(f'Wykryto wpisanie gracza,  niedodanego wcześniej do bazy')
        
    def commit(self):
        DB_Manager().commit()
        
        
    def rollback(self):
        DB_Manager().rollback()
        
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
